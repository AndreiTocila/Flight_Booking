/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.project.paypal.utils;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PaymentMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1734005442789163259L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentMessage\",\"namespace\":\"com.project.paypal.utils\",\"fields\":[{\"name\":\"total\",\"type\":\"double\",\"default\":1.0},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"method\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"intent\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentMessage> ENCODER =
      new BinaryMessageEncoder<PaymentMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentMessage> DECODER =
      new BinaryMessageDecoder<PaymentMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PaymentMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PaymentMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentMessage>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PaymentMessage to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PaymentMessage from a ByteBuffer. */
  public static PaymentMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public double total;
  @Deprecated public java.lang.String currency;
  @Deprecated public java.lang.String method;
  @Deprecated public java.lang.String intent;
  @Deprecated public java.lang.String description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentMessage() {}

  /**
   * All-args constructor.
   * @param total The new value for total
   * @param currency The new value for currency
   * @param method The new value for method
   * @param intent The new value for intent
   * @param description The new value for description
   */
  public PaymentMessage(java.lang.Double total, java.lang.String currency, java.lang.String method, java.lang.String intent, java.lang.String description) {
    this.total = total;
    this.currency = currency;
    this.method = method;
    this.intent = intent;
    this.description = description;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return total;
    case 1: return currency;
    case 2: return method;
    case 3: return intent;
    case 4: return description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: total = (java.lang.Double)value$; break;
    case 1: currency = (java.lang.String)value$; break;
    case 2: method = (java.lang.String)value$; break;
    case 3: intent = (java.lang.String)value$; break;
    case 4: description = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'total' field.
   * @return The value of the 'total' field.
   */
  public java.lang.Double getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Double value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.String getCurrency() {
    return currency;
  }

  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'method' field.
   * @return The value of the 'method' field.
   */
  public java.lang.String getMethod() {
    return method;
  }

  /**
   * Sets the value of the 'method' field.
   * @param value the value to set.
   */
  public void setMethod(java.lang.String value) {
    this.method = value;
  }

  /**
   * Gets the value of the 'intent' field.
   * @return The value of the 'intent' field.
   */
  public java.lang.String getIntent() {
    return intent;
  }

  /**
   * Sets the value of the 'intent' field.
   * @param value the value to set.
   */
  public void setIntent(java.lang.String value) {
    this.intent = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Creates a new PaymentMessage RecordBuilder.
   * @return A new PaymentMessage RecordBuilder
   */
  public static com.project.paypal.utils.PaymentMessage.Builder newBuilder() {
    return new com.project.paypal.utils.PaymentMessage.Builder();
  }

  /**
   * Creates a new PaymentMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentMessage RecordBuilder
   */
  public static com.project.paypal.utils.PaymentMessage.Builder newBuilder(com.project.paypal.utils.PaymentMessage.Builder other) {
    return new com.project.paypal.utils.PaymentMessage.Builder(other);
  }

  /**
   * Creates a new PaymentMessage RecordBuilder by copying an existing PaymentMessage instance.
   * @param other The existing instance to copy.
   * @return A new PaymentMessage RecordBuilder
   */
  public static com.project.paypal.utils.PaymentMessage.Builder newBuilder(com.project.paypal.utils.PaymentMessage other) {
    return new com.project.paypal.utils.PaymentMessage.Builder(other);
  }

  /**
   * RecordBuilder for PaymentMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentMessage>
    implements org.apache.avro.data.RecordBuilder<PaymentMessage> {

    private double total;
    private java.lang.String currency;
    private java.lang.String method;
    private java.lang.String intent;
    private java.lang.String description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.project.paypal.utils.PaymentMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.method)) {
        this.method = data().deepCopy(fields()[2].schema(), other.method);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.intent)) {
        this.intent = data().deepCopy(fields()[3].schema(), other.intent);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.project.paypal.utils.PaymentMessage other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.total)) {
        this.total = data().deepCopy(fields()[0].schema(), other.total);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.method)) {
        this.method = data().deepCopy(fields()[2].schema(), other.method);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.intent)) {
        this.intent = data().deepCopy(fields()[3].schema(), other.intent);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'total' field.
      * @return The value.
      */
    public java.lang.Double getTotal() {
      return total;
    }

    /**
      * Sets the value of the 'total' field.
      * @param value The value of 'total'.
      * @return This builder.
      */
    public com.project.paypal.utils.PaymentMessage.Builder setTotal(double value) {
      validate(fields()[0], value);
      this.total = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'total' field has been set.
      * @return True if the 'total' field has been set, false otherwise.
      */
    public boolean hasTotal() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'total' field.
      * @return This builder.
      */
    public com.project.paypal.utils.PaymentMessage.Builder clearTotal() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }

    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.project.paypal.utils.PaymentMessage.Builder setCurrency(java.lang.String value) {
      validate(fields()[1], value);
      this.currency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.project.paypal.utils.PaymentMessage.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'method' field.
      * @return The value.
      */
    public java.lang.String getMethod() {
      return method;
    }

    /**
      * Sets the value of the 'method' field.
      * @param value The value of 'method'.
      * @return This builder.
      */
    public com.project.paypal.utils.PaymentMessage.Builder setMethod(java.lang.String value) {
      validate(fields()[2], value);
      this.method = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'method' field has been set.
      * @return True if the 'method' field has been set, false otherwise.
      */
    public boolean hasMethod() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'method' field.
      * @return This builder.
      */
    public com.project.paypal.utils.PaymentMessage.Builder clearMethod() {
      method = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'intent' field.
      * @return The value.
      */
    public java.lang.String getIntent() {
      return intent;
    }

    /**
      * Sets the value of the 'intent' field.
      * @param value The value of 'intent'.
      * @return This builder.
      */
    public com.project.paypal.utils.PaymentMessage.Builder setIntent(java.lang.String value) {
      validate(fields()[3], value);
      this.intent = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'intent' field has been set.
      * @return True if the 'intent' field has been set, false otherwise.
      */
    public boolean hasIntent() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'intent' field.
      * @return This builder.
      */
    public com.project.paypal.utils.PaymentMessage.Builder clearIntent() {
      intent = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.project.paypal.utils.PaymentMessage.Builder setDescription(java.lang.String value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.project.paypal.utils.PaymentMessage.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentMessage build() {
      try {
        PaymentMessage record = new PaymentMessage();
        record.total = fieldSetFlags()[0] ? this.total : (java.lang.Double) defaultValue(fields()[0]);
        record.currency = fieldSetFlags()[1] ? this.currency : (java.lang.String) defaultValue(fields()[1]);
        record.method = fieldSetFlags()[2] ? this.method : (java.lang.String) defaultValue(fields()[2]);
        record.intent = fieldSetFlags()[3] ? this.intent : (java.lang.String) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentMessage>
    READER$ = (org.apache.avro.io.DatumReader<PaymentMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
