version: '3'
services:

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - project

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    networks:
      project:
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      project:
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    networks:
      project:
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8097,PLAINTEXT://kafka1:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    networks:
      project:
    ports:
      - "8098:8098"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8098,PLAINTEXT://kafka2:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    networks:
      project:
    ports:
      - "8099:8099"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8099,PLAINTEXT://kafka3:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    networks:
      project:
    ports:
      - "8081:8081"
    depends_on:
      - zookeeper
      - kafka1
      - kafka2
      - kafka3
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka1:9092, kafka2:9092, kafka3:9092
      SCHEMA_REGISTRY_DEBUG: 'true'

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks:
      project:
    depends_on:
      - kafka1
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092, kafka2:9092, kafka3:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  postgres-db:
    image: postgres
    container_name: postgres-db
    networks:
      project:
    ports:
      - "5431:5432"
    volumes:
      - postgres-db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres

  flight-search-lufthansa:
    build:
      context: .
      dockerfile: flight-search-service/Dockerfile
    container_name: flight-search-lufthansa
    depends_on:
      - mongodb
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - OPERATOR_NAME=Lufthansa
      - spring.data.mongodb.uri=mongodb://mongodb:27017/flightsearchdb
    ports:
      - "8051:8080"
    networks:
      - project

  flight-search-wizzair:
    build:
      context: .
      dockerfile: flight-search-service/Dockerfile
    container_name: flight-search-wizzair
    depends_on:
      - mongodb
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - OPERATOR_NAME=WizzAir
      - spring.data.mongodb.uri=mongodb://mongodb:27017/flightsearchdb
    ports:
      - "8052:8080"
    networks:
      - project

  flight-search-ryanair:
    build:
      context: .
      dockerfile: flight-search-service/Dockerfile
    container_name: flight-search-ryanair
    depends_on:
      - mongodb
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - OPERATOR_NAME=RyanAir
      - spring.data.mongodb.uri=mongodb://mongodb:27017/flightsearchdb
    ports:
      - "8053:8080"
    networks:
      - project

networks:
  project:

volumes:
  mongodb-data:
    driver: local
  postgres-db-data:
