version: '3'
services:

  flight-book-database:
    image: "postgres:16"
    container_name: "flight-book-database"
    restart: always
    networks:
      flight-book-network:
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: postgres
    volumes:
      - flight_book:/var/lib/postgresql/data
    expose:
      - "5432"

  #  flight-book-user-service:
  #    build:
  #      context: ./user-service
  #      dockerfile: Dockerfile
  #    container_name: "user-service"
  #    mem_swappiness: 100
  #    user: "cnb"
  #    entrypoint: "/cnb/process/web"
  #    networks:
  #      flight-book-network:
  #    healthcheck:
  #      test: "curl --fail --silent localhost:9001/userservice/actuator/health | grep UP || exit 1"
  #      interval: 20s
  #      timeout: 5s
  #      retries: 10
  #    depends_on:
  #      flight-book-database:
  #        condition: service_started
  #    environment:
  #      - BPL_JVM_THREAD_COUNT=10
  #      - JAVA_TOOL_OPTIONS=-Xmx64m -Xss256k -XX:MaxMetaspaceSize=100M -XX:ReservedCodeCacheSize=24M
  #      - LIQUIBASE_CONTEXT=local-dev
  #      - DB_URL=jdbc:postgresql://flight-book-database:5432/postgres?useSSL=false
  #    expose:
  #      - "9001"

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "9001:9001"
    networks:
      flight-book-network:
    depends_on:
      - flight-book-database
      - schema-registry
      - kafka1
    environment:
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/spring-app
      - spring.datasource.url=jdbc:postgresql://flight-book-database:5432/postgres?useSSL=false
      - kafka.bootstrap-servers=kafka1:9092,kafka2:9092,kafka3:9092
      - schema.registry.url=http://schema-registry:8081

  booking-service:
    build:
      context: ./booking-service
      dockerfile: Dockerfile
    container_name: booking-service
    ports:
      - "9090:9090"
    networks:
      flight-book-network:
    depends_on:
      - booking-service-db
      - schema-registry
      - kafka1
    environment:
      - spring.data.mongodb.uri=mongodb://booking-service-db:27017/Bookings
      - kafka.bootstrap-servers=kafka1:9092,kafka2:9092,kafka3:9092
      - schema.registry.url=http://schema-registry:8081

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "9091:8080"
    networks:
      flight-book-network:
    depends_on:
      - payment-service-db
      - schema-registry
      - kafka1
    environment:
      - spring.data.mongodb.uri=mongodb://payment-service-db:27018/paypal
      - spring.kafka.consumer.bootstrap-servers=kafka1:9092,kafka2:9092,kafka3:9092
      - spring.kafka.producer.bootstrap-servers=kafka1:9092,kafka2:9092,kafka3:9092
      - spring.kafka.consumer.properties.schema.registry.url=http://schema-registry:8081
      - spring.kafka.producer.properties.schema.registry.url=http://schema-registry:8081

  booking-service-db:
    container_name: booking-service-db
    image: mongo:latest
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_DATABASE: Bookings
    volumes:
      - booking-service-db-data:/data/db
    networks:
      - flight-book-network
    restart: unless-stopped

  payment-service-db:
    container_name: payment-service-db
    image: mongo:latest
    ports:
      - '27018:27017'
    environment:
      MONGO_INITDB_DATABASE: paypal
    volumes:
      - payment-service-db-data:/data/db
    networks:
      - flight-book-network
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak2
    networks:
      flight-book-network:
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command:
      - start-dev

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      flight-book-network:
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    restart: unless-stopped

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    networks:
      flight-book-network:
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8097,PLAINTEXT://kafka1:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    restart: unless-stopped

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    networks:
      flight-book-network:
    ports:
      - "8098:8098"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8098,PLAINTEXT://kafka2:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    restart: unless-stopped

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    networks:
      flight-book-network:
    ports:
      - "8099:8099"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8099,PLAINTEXT://kafka3:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    restart: unless-stopped

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    hostname: schema-registry
    networks:
      flight-book-network:
    ports:
      - "8081:8081"
    depends_on:
      - zookeeper
      - kafka1
      - kafka2
      - kafka3
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka1:9092, kafka2:9092, kafka3:9092
      SCHEMA_REGISTRY_DEBUG: 'true'

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    networks:
      flight-book-network:
    depends_on:
      - kafka1
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092, kafka2:9092, kafka3:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: unless-stopped

volumes:
  flight_book:
  booking-service-db-data:
  payment-service-db-data:

networks:
  flight-book-network:
    driver: bridge